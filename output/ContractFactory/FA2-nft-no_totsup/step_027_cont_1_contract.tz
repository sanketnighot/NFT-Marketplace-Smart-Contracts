parameter (or (list %receive_balances (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) (unit %reinit));
storage   (pair (nat %last_sum) (bool %operator_support));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        SWAP;       # @storage : @parameter%receive_balances
        # == receive_balances ==
        # self.data.last_sum = 0 # @storage : @parameter%receive_balances
        PUSH nat 0; # nat : @storage : @parameter%receive_balances
        UPDATE 1;   # @storage : @parameter%receive_balances
        SWAP;       # @parameter%receive_balances : @storage
        # for resp in params: ... # @parameter%receive_balances : @storage
        DUP;        # @parameter%receive_balances : @parameter%receive_balances : @storage
        ITER
          {
            # self.data.last_sum += resp.balance # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%receive_balances : @storage
            DIG 2;      # @storage : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%receive_balances
            DUP;        # @storage : @storage : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%receive_balances
            CAR;        # nat : @storage : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%receive_balances
            DIG 2;      # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : nat : @storage : @parameter%receive_balances
            CDR;        # nat : nat : @storage : @parameter%receive_balances
            ADD;        # nat : @storage : @parameter%receive_balances
            UPDATE 1;   # @storage : @parameter%receive_balances
            SWAP;       # @parameter%receive_balances : @storage
          }; # @parameter%receive_balances : @storage
        DROP;       # @storage
      }
      {
        DROP;       # @storage
        # == reinit ==
        # self.data.last_sum = 0 # @storage
        PUSH nat 0; # nat : @storage
        UPDATE 1;   # @storage
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };