parameter (or (big_map %deploy_fa2 string bytes) (pair %mint_token (pair (nat %amount) (address %contract)) (pair (map %metadata string bytes) (nat %token_id))));
storage   (big_map address (list address));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        # == deploy_fa2 ==
        # create_contract_ContractFactory_43 = sp.local("create_contract_ContractFactory_43", create contract ...) # @parameter%deploy_fa2 : @storage
        NIL operation; # list operation : @parameter%deploy_fa2 : @storage
        EMPTY_BIG_MAP nat (pair nat (map string bytes)); # big_map nat (pair nat (map string bytes)) : list operation : @parameter%deploy_fa2 : @storage
        PUSH bool False; # bool : big_map nat (pair nat (map string bytes)) : list operation : @parameter%deploy_fa2 : @storage
        PAIR;       # pair bool (big_map nat (pair nat (map string bytes))) : list operation : @parameter%deploy_fa2 : @storage
        EMPTY_BIG_MAP (pair address (pair address nat)) unit; # big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : list operation : @parameter%deploy_fa2 : @storage
        DIG 3;      # @parameter%deploy_fa2 : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : list operation : @storage
        PAIR;       # pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit) : pair bool (big_map nat (pair nat (map string bytes))) : list operation : @storage
        PAIR;       # pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : list operation : @storage
        EMPTY_BIG_MAP (pair address nat) nat; # big_map (pair address nat) nat : pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : list operation : @storage
        PUSH nat 0; # nat : big_map (pair address nat) nat : pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : list operation : @storage
        PAIR;       # pair nat (big_map (pair address nat) nat) : pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : list operation : @storage
        SELF_ADDRESS; # @self : pair nat (big_map (pair address nat) nat) : pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : list operation : @storage
        PAIR;       # pair @self (pair nat (big_map (pair address nat) nat)) : pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : list operation : @storage
        PAIR;       # pair (pair @self (pair nat (big_map (pair address nat) nat))) (pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list operation : @storage
        PUSH mutez 0; # mutez : pair (pair @self (pair nat (big_map (pair address nat) nat))) (pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list operation : @storage
        NONE key_hash; # option key_hash : mutez : pair (pair @self (pair nat (big_map (pair address nat) nat))) (pair (pair @parameter%deploy_fa2 (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list operation : @storage
        CREATE_CONTRACT
         { parameter (or (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (or (pair %mint (pair (address %address) (nat %amount)) (pair (map %metadata string bytes) (nat %token_id))) (address %set_administrator))) (or (or (pair %set_metadata (string %k) (bytes %v)) (bool %set_pause)) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (list %update_operators (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))))));
           storage   (pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))));
           code
             {
               CAST (pair (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair (map string bytes) nat)) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat))))))) (pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))))); # pair (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair (map string bytes) nat)) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat))))))) (pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))))
               UNPAIR;     # or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair (map string bytes) nat)) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat)))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
               IF_LEFT
                 {
                   IF_LEFT
                     {
                       SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))
                       # == balance_of ==
                       # sp.verify(~ self.data.paused, 'FA2_PAUSED') # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))
                       DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))
                       DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       GET 5;      # bool : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       IF
                         {
                           PUSH string "FA2_PAUSED"; # string : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           FAILWITH;   # FAILED
                         }
                         {}; # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       # def f_x0(_x0):
                       #   sp.verify(self.data.token_metadata.contains(_x0.token_id), 'FA2_TOKEN_UNDEFINED')
                       #   sp.if self.data.ledger.contains((sp.set_type_expr(_x0.owner, sp.TAddress), sp.set_type_expr(_x0.token_id, sp.TNat))):
                       #     sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(_x0.owner, sp.TAddress), token_id = sp.set_type_expr(_x0.token_id, sp.TNat)), balance = self.data.ledger[(sp.set_type_expr(_x0.owner, sp.TAddress), sp.set_type_expr(_x0.token_id, sp.TNat))].balance))
                       #   sp.else:
                       #     sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(_x0.owner, sp.TAddress), token_id = sp.set_type_expr(_x0.token_id, sp.TNat)), balance = 0))
                       # responses = sp.local("responses", params.requests.map(sp.build_lambda(f_x0))) # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       DUP;        # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       CAR;        # list (pair address nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       MAP
                         {
                           # sp.verify(self.data.token_metadata.contains(_x0.token_id), 'FA2_TOKEN_UNDEFINED') # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 6;      # big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair address nat : big_map nat (pair nat (map string bytes)) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # pair address nat : pair address nat : big_map nat (pair nat (map string bytes)) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUG 2;      # pair address nat : big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CDR;        # nat : big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           MEM;        # bool : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {}
                             {
                               PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               FAILWITH;   # FAILED
                             }; # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           # if self.data.ledger.contains((sp.set_type_expr(_x0.owner, sp.TAddress), sp.set_type_expr(_x0.token_id, sp.TNat))): # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 4;      # big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CDR;        # nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # pair address nat : pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUG 3;      # pair address nat : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # address : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           PAIR;       # pair address nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           MEM;        # bool : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {
                               # sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(_x0.owner, sp.TAddress), token_id = sp.set_type_expr(_x0.token_id, sp.TNat)), balance = self.data.ledger[(sp.set_type_expr(_x0.owner, sp.TAddress), sp.set_type_expr(_x0.token_id, sp.TNat))].balance)) # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUP 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               GET 4;      # big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               SWAP;       # pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               CDR;        # nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               SWAP;       # pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUP;        # pair address nat : pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUG 3;      # pair address nat : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               CAR;        # address : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               PAIR;       # pair address nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               GET;        # option nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               IF_NONE
                                 {
                                   PUSH int 474; # int : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   FAILWITH;   # FAILED
                                 }
                                 {}; # @some : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               SWAP;       # pair address nat : @some : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               PAIR;       # pair (pair address nat) @some : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                             }
                             {
                               # sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(_x0.owner, sp.TAddress), token_id = sp.set_type_expr(_x0.token_id, sp.TNat)), balance = 0)) # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               PUSH nat 0; # nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               SWAP;       # pair address nat : nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               PAIR;       # pair (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                             }; # pair (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                         }; # list (pair (pair address nat) nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       # sp.transfer(responses.value, sp.tez(0), sp.set_type_expr(params.callback, sp.TContract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance")))))) # list (pair (pair address nat) nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       NIL operation; # list operation : list (pair (pair address nat) nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       DIG 2;      # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : list operation : list (pair (pair address nat) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       CDR;        # contract (list (pair (pair address nat) nat)) : list operation : list (pair (pair address nat) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       PUSH mutez 0; # mutez : contract (list (pair (pair address nat) nat)) : list operation : list (pair (pair address nat) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       DIG 3;      # list (pair (pair address nat) nat) : mutez : contract (list (pair (pair address nat) nat)) : list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       TRANSFER_TOKENS; # operation : list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       CONS;       # list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                     }
                     {
                       IF_LEFT
                         {
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           # == mint ==
                           # sp.verify(~ (params.token_id < self.data.all_tokens), 'NFT-asset: cannot mint twice same token') # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 3;      # nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUG 2;      # pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 4;      # nat : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           COMPARE;    # int : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           LT;         # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {
                               PUSH string "NFT-asset: cannot mint twice same token"; # string : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               FAILWITH;   # FAILED
                             }
                             {}; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           # if self.data.ledger.contains((sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))): # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 4;      # big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 4;      # nat : pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUG 3;      # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # pair address nat : nat : big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # address : nat : big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           PAIR;       # pair address nat : big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           MEM;        # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {
                               SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               # self.data.ledger[(sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))].balance += params.amount # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               DIG 5;      # pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               GET 4;      # nat : pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               DUG 7;      # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CAR;        # pair address nat : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               GET;        # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               IF_NONE
                                 {
                                   PUSH int 596; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                                   FAILWITH;   # FAILED
                                 }
                                 {}; # @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               DUP 7;      # pair (pair address nat) (pair (map string bytes) nat) : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CAR;        # pair address nat : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CDR;        # nat : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               ADD;        # nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SOME;       # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                             }
                             {
                               SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               # self.data.ledger[(sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))] = sp.record(balance = params.amount) # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               DUP 5;      # pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CAR;        # pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CDR;        # nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SOME;       # option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               DIG 5;      # pair (pair address nat) (pair (map string bytes) nat) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               GET 4;      # nat : pair (pair address nat) (pair (map string bytes) nat) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                               DUG 7;      # pair (pair address nat) (pair (map string bytes) nat) : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CAR;        # pair address nat : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CAR;        # address : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                             }; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           # if ~ (params.token_id < self.data.all_tokens): # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                           DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 3;      # nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUG 2;      # pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 4;      # nat : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           COMPARE;    # int : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           LT;         # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {
                               DROP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                             }
                             {
                               # sp.verify(self.data.all_tokens == params.token_id, 'Token-IDs should be consecutive') # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               GET 4;      # nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUP 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               GET 3;      # nat : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               COMPARE;    # int : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               EQ;         # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               IF
                                 {}
                                 {
                                   PUSH string "Token-IDs should be consecutive"; # string : pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   FAILWITH;   # FAILED
                                 }; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               # self.data.all_tokens = params.token_id + 1 # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               CDR;        # big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PUSH nat 1; # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               DUP 5;      # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               GET 4;      # nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               ADD;        # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               # self.data.token_metadata[params.token_id] = sp.record(token_id = params.token_id, token_info = params.metadata) # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               GET 6;      # big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               DIG 2;      # pair (pair address nat) (pair (map string bytes) nat) : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               GET 3;      # map string bytes : pair (pair address nat) (pair (map string bytes) nat) : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUG 4;      # pair (pair address nat) (pair (map string bytes) nat) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               GET 4;      # nat : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               PAIR;       # pair nat (map string bytes) : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               SOME;       # option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address nat) (pair (map string bytes) nat)
                               DIG 3;      # pair (pair address nat) (pair (map string bytes) nat) : option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               GET 4;      # nat : option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               UPDATE;     # big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               UPDATE 6;   # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                             }; # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                         }
                         {
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : address
                           # == set_administrator ==
                           # sp.verify(sp.sender == self.data.administrator, 'FA2_NOT_ADMIN') # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : address
                           DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : address
                           DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : address : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : address : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # address : address : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SENDER;     # @sender : address : address : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           COMPARE;    # int : address : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           EQ;         # bool : address : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {}
                             {
                               PUSH string "FA2_NOT_ADMIN"; # string : address : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               FAILWITH;   # FAILED
                             }; # address : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : address
                           # self.data.administrator = params # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : address
                           UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : address
                           CDR;        # pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : address
                           DIG 2;      # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                           PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                           PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                         }; # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                       NIL operation; # list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                     }; # list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                 }
                 {
                   IF_LEFT
                     {
                       IF_LEFT
                         {
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair string bytes
                           # == set_metadata ==
                           # sp.verify(sp.sender == self.data.administrator, 'FA2_NOT_ADMIN') # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair string bytes
                           DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair string bytes
                           DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair string bytes : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair string bytes : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # address : pair string bytes : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SENDER;     # @sender : address : pair string bytes : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           COMPARE;    # int : pair string bytes : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           EQ;         # bool : pair string bytes : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {}
                             {
                               PUSH string "FA2_NOT_ADMIN"; # string : pair string bytes : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               FAILWITH;   # FAILED
                             }; # pair string bytes : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair string bytes
                           # self.data.metadata[params.k] = params.v # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair string bytes
                           UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair string bytes
                           SWAP;       # pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat (big_map (pair address nat) nat)) : pair string bytes
                           UNPAIR;     # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair string bytes
                           UNPAIR;     # big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair string bytes
                           DUP 5;      # pair string bytes : big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair string bytes
                           CDR;        # bytes : big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair string bytes
                           SOME;       # option bytes : big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair string bytes
                           DIG 5;      # pair string bytes : option bytes : big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat))
                           CAR;        # string : option bytes : big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat))
                           UPDATE;     # big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat))
                           PAIR;       # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat))
                           PAIR;       # pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat (big_map (pair address nat) nat))
                           SWAP;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))
                           PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                         }
                         {
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : bool
                           # == set_pause ==
                           # sp.verify(sp.sender == self.data.administrator, 'FA2_NOT_ADMIN') # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : bool
                           DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : bool
                           DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           CAR;        # address : bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           SENDER;     # @sender : address : bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           COMPARE;    # int : bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           EQ;         # bool : bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {}
                             {
                               PUSH string "FA2_NOT_ADMIN"; # string : bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               FAILWITH;   # FAILED
                             }; # bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           # self.data.paused = params # bool : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           UPDATE 5;   # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                         }; # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                     }
                     {
                       IF_LEFT
                         {
                           SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list (pair address (list (pair address (pair nat nat))))
                           # == transfer ==
                           # sp.verify(~ self.data.paused, 'FA2_PAUSED') # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list (pair address (list (pair address (pair nat nat))))
                           DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list (pair address (list (pair address (pair nat nat))))
                           DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           GET 5;      # bool : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           IF
                             {
                               PUSH string "FA2_PAUSED"; # string : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               FAILWITH;   # FAILED
                             }
                             {}; # list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           # for transfer in params: ... # list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # list (pair address (list (pair address (pair nat nat)))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           ITER
                             {
                               # for tx in transfer.txs: ... # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DUP;        # pair address (list (pair address (pair nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               CDR;        # list (pair address (pair nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               ITER
                                 {
                                   # sp.verify(((sp.sender == self.data.administrator) | (transfer.from_ == sp.sender)) | (self.data.operators.contains(sp.set_type_expr(sp.record(owner = transfer.from_, operator = sp.sender, token_id = tx.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))))), 'FA2_NOT_OPERATOR') # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DUP 4;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   CAR;        # address : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   SENDER;     # @sender : address : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   EQ;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {
                                       PUSH bool True; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }
                                     {
                                       SENDER;     # @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 3;      # pair address (list (pair address (pair nat nat))) : @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # address : @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       EQ;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {
                                       PUSH bool True; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }
                                     {
                                       DUP 4;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 3;      # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CDR;        # big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       SWAP;       # pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUG 2;      # pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 3;      # nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       SENDER;     # @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 5;      # pair address (list (pair address (pair nat nat))) : @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # address : @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       PAIR 3;     # pair address (pair @sender nat) : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "FA2_NOT_OPERATOR"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       FAILWITH;   # FAILED
                                     }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   # sp.verify(self.data.token_metadata.contains(tx.token_id), 'FA2_TOKEN_UNDEFINED') # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DUP 4;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   GET 6;      # big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   SWAP;       # pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DUG 2;      # pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   GET 3;      # nat : big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       FAILWITH;   # FAILED
                                     }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   # if tx.amount > 0: # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   GET 4;      # nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   PUSH nat 0; # nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   LT;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {
                                       # sp.verify(self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance >= tx.amount, 'FA2_INSUFFICIENT_BALANCE') # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 4;      # nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 5;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 4;      # big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 3;      # pair address (pair nat nat) : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 3;      # nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 5;      # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # address : nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET;        # option nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       IF_NONE
                                         {
                                           PUSH int 450; # int : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GE;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       IF
                                         {}
                                         {
                                           PUSH string "FA2_INSUFFICIENT_BALANCE"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                           FAILWITH;   # FAILED
                                         }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       # self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance = sp.as_nat(self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance - tx.amount) # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 4;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 6;      # pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 3;      # nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 8;      # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET;        # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       IF_NONE
                                         {
                                           PUSH int 453; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           DROP;       # pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                         }; # pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP 6;      # pair address (pair nat nat) : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 4;      # nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DIG 9;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       GET 4;      # big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       DUP 8;      # pair address (pair nat nat) : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       GET 3;      # nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       DUP 10;     # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       CAR;        # address : nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       GET;        # option nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       IF_NONE
                                         {
                                           PUSH int 454; # int : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       SUB;        # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       ISNAT;      # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       IF_NONE
                                         {
                                           PUSH int 453; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       SOME;       # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       # if self.data.ledger.contains((sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))): # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                       DUG 4;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 4;      # big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       SWAP;       # pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       GET 3;      # nat : pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       SWAP;       # pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       DUG 3;      # pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # address : nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       PAIR;       # pair address nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       IF
                                         {
                                           # self.data.ledger[(sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance += tx.amount # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                           DIG 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DIG 5;      # pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           GET 3;      # nat : pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUG 7;      # pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           GET;        # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           IF_NONE
                                             {
                                               PUSH int 456; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DIG 6;      # pair address (pair nat nat) : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           GET 4;      # nat : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           ADD;        # nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SOME;       # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUG 2;      # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                         }
                                         {
                                           # self.data.ledger[(sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))] = sp.record(balance = tx.amount) # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                           DIG 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUP 5;      # pair address (pair nat nat) : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           GET 4;      # nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SOME;       # option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DIG 5;      # pair address (pair nat nat) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           GET 3;      # nat : pair address (pair nat nat) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # pair address (pair nat nat) : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           CAR;        # address : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                           DUG 2;      # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                         }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }
                                     {
                                       DROP;       # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                 }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               DROP;       # list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                             }; # list (pair address (list (pair address (pair nat nat)))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DROP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                         }
                         {
                           # == update_operators ==
                           # for update in params: ... # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DUP;        # list (or (pair address (pair address nat)) (pair address (pair address nat))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           ITER
                             {
                               # with update.match_cases(...): # or (pair address (pair address nat)) (pair address (pair address nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                               IF_LEFT
                                 {
                                   # sp.verify((add_operator.owner == sp.sender) | (sp.sender == self.data.administrator), 'FA2_NOT_ADMIN_OR_OPERATOR') # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DUP;        # pair address (pair address nat) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {
                                       PUSH bool True; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }
                                     {
                                       DUP 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "FA2_NOT_ADMIN_OR_OPERATOR"; # string : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       FAILWITH;   # FAILED
                                     }; # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   # self.data.operators[sp.set_type_expr(sp.record(owner = add_operator.owner, operator = add_operator.operator, token_id = add_operator.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))))] = sp.unit # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DIG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   UNPAIR;     # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   UNPAIR;     # big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PUSH (option unit) (Some Unit); # option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   DIG 5;      # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   DUP;        # pair address (pair address nat) : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   GET 4;      # nat : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   DUP;        # pair address (pair address nat) : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   GET 3;      # address : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # pair address (pair address nat) : address : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   CAR;        # address : address : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   UPDATE;     # big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PAIR;       # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PAIR;       # pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                 }
                                 {
                                   # sp.verify((remove_operator.owner == sp.sender) | (sp.sender == self.data.administrator), 'FA2_NOT_ADMIN_OR_OPERATOR') # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DUP;        # pair address (pair address nat) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {
                                       PUSH bool True; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }
                                     {
                                       DUP 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                     }; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "FA2_NOT_ADMIN_OR_OPERATOR"; # string : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                       FAILWITH;   # FAILED
                                     }; # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   # del self.data.operators[sp.set_type_expr(sp.record(owner = remove_operator.owner, operator = remove_operator.operator, token_id = remove_operator.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))))] # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                   DIG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   UNPAIR;     # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   UNPAIR;     # big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   NONE unit;  # option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   DIG 5;      # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   DUP;        # pair address (pair address nat) : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   GET 4;      # nat : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   DUP;        # pair address (pair address nat) : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   GET 3;      # address : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # pair address (pair address nat) : address : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   CAR;        # address : address : nat : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   UPDATE;     # big_map (pair address (pair address nat)) unit : big_map string bytes : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # big_map string bytes : big_map (pair address (pair address nat)) unit : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PAIR;       # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair bool (big_map nat (pair nat (map string bytes))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PAIR;       # pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : pair address (pair nat (big_map (pair address nat) nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                                   SWAP;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                                 }; # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                             }; # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                           DROP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                         }; # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                     }; # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                   NIL operation; # list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
                 }; # list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes)))))
               PAIR;       # pair (list operation) (pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair bool (big_map nat (pair nat (map string bytes))))))
             };
         }; # operation : address : list operation : @storage
        PAIR;       # pair operation address : list operation : @storage
        # sp.operations().push(create_contract_ContractFactory_43.value.operation) # pair operation address : list operation : @storage
        DUP;        # pair operation address : pair operation address : list operation : @storage
        DUG 2;      # pair operation address : list operation : pair operation address : @storage
        CAR;        # operation : list operation : pair operation address : @storage
        CONS;       # list operation : pair operation address : @storage
        SWAP;       # pair operation address : list operation : @storage
        # if self.data.contracts.contains(sp.sender): # pair operation address : list operation : @storage
        DUP 3;      # @storage : pair operation address : list operation : @storage
        SENDER;     # @sender : @storage : pair operation address : list operation : @storage
        MEM;        # bool : pair operation address : list operation : @storage
        IF
          {
            # self.data.contracts[sp.sender].push(create_contract_ContractFactory_43.value.address) # pair operation address : list operation : @storage
            DIG 2;      # @storage : pair operation address : list operation
            DUP;        # @storage : @storage : pair operation address : list operation
            SENDER;     # @sender : @storage : @storage : pair operation address : list operation
            GET;        # option (list address) : @storage : pair operation address : list operation
            IF_NONE
              {
                PUSH int 51; # int : @storage : pair operation address : list operation
                FAILWITH;   # FAILED
              }
              {}; # @some : @storage : pair operation address : list operation
            DUP 3;      # pair operation address : @some : @storage : pair operation address : list operation
            CDR;        # address : @some : @storage : pair operation address : list operation
            CONS;       # list address : @storage : pair operation address : list operation
            SOME;       # option (list address) : @storage : pair operation address : list operation
            SENDER;     # @sender : option (list address) : @storage : pair operation address : list operation
            UPDATE;     # big_map address (list address) : pair operation address : list operation
            DUG 2;      # pair operation address : list operation : big_map address (list address)
          }
          {
            # self.data.contracts[sp.sender] = sp.list([create_contract_ContractFactory_43.value.address]) # pair operation address : list operation : @storage
            DIG 2;      # @storage : pair operation address : list operation
            NIL address; # list address : @storage : pair operation address : list operation
            DUP 3;      # pair operation address : list address : @storage : pair operation address : list operation
            CDR;        # address : list address : @storage : pair operation address : list operation
            CONS;       # list address : @storage : pair operation address : list operation
            SOME;       # option (list address) : @storage : pair operation address : list operation
            SENDER;     # @sender : option (list address) : @storage : pair operation address : list operation
            UPDATE;     # big_map address (list address) : pair operation address : list operation
            DUG 2;      # pair operation address : list operation : big_map address (list address)
          }; # pair operation address : list operation : big_map address (list address)
        SWAP;       # list operation : pair operation address : big_map address (list address)
        # sp.emit(sp.record(contract_address = create_contract_ContractFactory_43.value.address, deployed_by = sp.sender, event = 'CONTRACT_DEPLOYED'), tag = "CONTRACT_DEPLOYED") # list operation : pair operation address : big_map address (list address)
        PUSH string "CONTRACT_DEPLOYED"; # string : list operation : pair operation address : big_map address (list address)
        SENDER;     # @sender : string : list operation : pair operation address : big_map address (list address)
        DIG 3;      # pair operation address : @sender : string : list operation : big_map address (list address)
        CDR;        # address : @sender : string : list operation : big_map address (list address)
        PAIR 3;     # pair address (pair @sender string) : list operation : big_map address (list address)
        EMIT %CONTRACT_DEPLOYED (pair (address %contract_address) (pair (address %deployed_by) (string %event))); # operation : list operation : big_map address (list address)
        CONS;       # list operation : big_map address (list address)
      }
      {
        # == mint_token ==
        # for addr in self.data.contracts[sp.sender]: ... # @parameter%mint_token : @storage
        NIL operation; # list operation : @parameter%mint_token : @storage
        DUP 3;      # @storage : list operation : @parameter%mint_token : @storage
        SENDER;     # @sender : @storage : list operation : @parameter%mint_token : @storage
        GET;        # option (list address) : list operation : @parameter%mint_token : @storage
        IF_NONE
          {
            PUSH int 63; # int : list operation : @parameter%mint_token : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : list operation : @parameter%mint_token : @storage
        ITER
          {
            # if addr == params.contract: # address : list operation : @parameter%mint_token : @storage
            DUP 3;      # @parameter%mint_token : address : list operation : @parameter%mint_token : @storage
            CAR;        # pair (nat %amount) (address %contract) : address : list operation : @parameter%mint_token : @storage
            CDR;        # address : address : list operation : @parameter%mint_token : @storage
            COMPARE;    # int : list operation : @parameter%mint_token : @storage
            EQ;         # bool : list operation : @parameter%mint_token : @storage
            IF
              {
                SWAP;       # @parameter%mint_token : list operation : @storage
                # sp.transfer(sp.record(address = sp.sender, amount = params.amount, metadata = params.metadata, token_id = params.token_id), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, amount = sp.TNat, metadata = sp.TMap(sp.TString, sp.TBytes), token_id = sp.TNat).layout((("address", "amount"), ("metadata", "token_id"))), params.contract, entry_point='mint').open_some()) # @parameter%mint_token : list operation : @storage
                DUP;        # @parameter%mint_token : @parameter%mint_token : list operation : @storage
                DUG 2;      # @parameter%mint_token : list operation : @parameter%mint_token : @storage
                CAR;        # pair (nat %amount) (address %contract) : list operation : @parameter%mint_token : @storage
                CDR;        # address : list operation : @parameter%mint_token : @storage
                CONTRACT %mint (pair (pair (address %address) (nat %amount)) (pair (map %metadata string bytes) (nat %token_id))); # option (contract (pair (pair (address %address) (nat %amount)) (pair (map %metadata string bytes) (nat %token_id)))) : list operation : @parameter%mint_token : @storage
                IF_NONE
                  {
                    PUSH int 65; # int : list operation : @parameter%mint_token : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%mint_token : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%mint_token : @storage
                DIG 3;      # @parameter%mint_token : mutez : @some : list operation : @storage
                DUP;        # @parameter%mint_token : @parameter%mint_token : mutez : @some : list operation : @storage
                GET 4;      # nat : @parameter%mint_token : mutez : @some : list operation : @storage
                SWAP;       # @parameter%mint_token : nat : mutez : @some : list operation : @storage
                DUP;        # @parameter%mint_token : @parameter%mint_token : nat : mutez : @some : list operation : @storage
                DUG 5;      # @parameter%mint_token : nat : mutez : @some : list operation : @parameter%mint_token : @storage
                GET 3;      # map string bytes : nat : mutez : @some : list operation : @parameter%mint_token : @storage
                PAIR;       # pair (map string bytes) nat : mutez : @some : list operation : @parameter%mint_token : @storage
                DUP 5;      # @parameter%mint_token : pair (map string bytes) nat : mutez : @some : list operation : @parameter%mint_token : @storage
                CAR;        # pair (nat %amount) (address %contract) : pair (map string bytes) nat : mutez : @some : list operation : @parameter%mint_token : @storage
                CAR;        # nat : pair (map string bytes) nat : mutez : @some : list operation : @parameter%mint_token : @storage
                SENDER;     # @sender : nat : pair (map string bytes) nat : mutez : @some : list operation : @parameter%mint_token : @storage
                PAIR;       # pair @sender nat : pair (map string bytes) nat : mutez : @some : list operation : @parameter%mint_token : @storage
                PAIR;       # pair (pair @sender nat) (pair (map string bytes) nat) : mutez : @some : list operation : @parameter%mint_token : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%mint_token : @storage
                CONS;       # list operation : @parameter%mint_token : @storage
                # sp.emit(sp.record(amount = params.amount, event = 'TOKEN_MINTED', minted_by = sp.sender), tag = "TOKEN_MINTED") # list operation : @parameter%mint_token : @storage
                SENDER;     # @sender : list operation : @parameter%mint_token : @storage
                PUSH string "TOKEN_MINTED"; # string : @sender : list operation : @parameter%mint_token : @storage
                DUP 4;      # @parameter%mint_token : string : @sender : list operation : @parameter%mint_token : @storage
                CAR;        # pair (nat %amount) (address %contract) : string : @sender : list operation : @parameter%mint_token : @storage
                CAR;        # nat : string : @sender : list operation : @parameter%mint_token : @storage
                PAIR 3;     # pair nat (pair string @sender) : list operation : @parameter%mint_token : @storage
                EMIT %TOKEN_MINTED (pair (nat %amount) (pair (string %event) (address %minted_by))); # operation : list operation : @parameter%mint_token : @storage
                CONS;       # list operation : @parameter%mint_token : @storage
              }
              {}; # list operation : @parameter%mint_token : @storage
          }; # list operation : @parameter%mint_token : @storage
        SWAP;       # @parameter%mint_token : list operation : @storage
        DROP;       # list operation : @storage
      }; # list operation : big_map address (list address)
    NIL operation; # list operation : list operation : big_map address (list address)
    SWAP;       # list operation : list operation : big_map address (list address)
    ITER
      {
        CONS;       # list operation : big_map address (list address)
      }; # list operation : big_map address (list address)
    PAIR;       # pair (list operation) (big_map address (list address))
  };